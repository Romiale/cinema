{"ast":null,"code":"var _jsxFileName = \"/home/user/mon PC/travauxKDA/cinema/src/pages/Movies.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport styles from '../style/movies.module.scss';\nimport CardMovie from '../components/CardMovie';\nimport Footer from '../components/Footer';\nimport treeBestMovies from '../components/treeBestMovies';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ActionMovies({\n  getMoviesByCategories,\n  MoviesByGenre,\n  genres\n}) {\n  _s();\n\n  const getGenresMovies = (genreId, genreName) => {\n    getMoviesByCategories(genreId);\n    setGenreTitle(genreName);\n  };\n\n  const [genreTitle, setGenreTitle] = useState(\"\");\n  const [treeFirtsMovies, setTreeFirtsMovies] = useState([]);\n  const [MoviesToShow, setMoviesToShow] = useState([]);\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    setMovies(MoviesByGenre);\n    setMoviesToShow(MoviesByGenre);\n\n    const sortMovies = () => {\n      const sortedMoovies = MoviesByGenre.sort((a, b) => {\n        return b.vote_count - a.vote_count;\n      });\n      setTreeFirtsMovies(sortedMoovies.slice(0, 3));\n    };\n\n    sortMovies();\n  }, [MoviesByGenre]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.body,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.parent__presentaion_cards,\n      children: [/*#__PURE__*/_jsxDEV(\"treeBestMovies\", {\n        treeFirtsMovies: treeFirtsMovies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: genres.map(genre => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"m-1\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => getGenresMovies(genre.id, genre.name),\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"nobr\", {\n              children: genre.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 144\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 81\n          }, this)]\n        }, genre.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 45\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-white mt-5 p-3 header\",\n      children: genreTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.Movies__cards__parent,\n      id: \"myHeader\",\n      children: movies.map(Movie => {\n        return /*#__PURE__*/_jsxDEV(CardMovie, {\n          Movie: Movie\n        }, Movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 32\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ActionMovies, \"+Kqu6GkHYuzzh5yiz9nB303hCdc=\");\n\n_c = ActionMovies;\n\nvar _c;\n\n$RefreshReg$(_c, \"ActionMovies\");","map":{"version":3,"sources":["/home/user/mon PC/travauxKDA/cinema/src/pages/Movies.jsx"],"names":["React","useState","useEffect","styles","CardMovie","Footer","treeBestMovies","ActionMovies","getMoviesByCategories","MoviesByGenre","genres","getGenresMovies","genreId","genreName","setGenreTitle","genreTitle","treeFirtsMovies","setTreeFirtsMovies","MoviesToShow","setMoviesToShow","movies","setMovies","sortMovies","sortedMoovies","sort","a","b","vote_count","slice","body","parent__presentaion_cards","map","genre","id","name","Movies__cards__parent","Movie"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styles from '../style/movies.module.scss';\nimport CardMovie from '../components/CardMovie';\nimport Footer from '../components/Footer';\nimport treeBestMovies from '../components/treeBestMovies'\n\n\nexport default function ActionMovies({ getMoviesByCategories, MoviesByGenre, genres }) {\n\n    const getGenresMovies = (genreId, genreName) => {\n        getMoviesByCategories(genreId)\n        setGenreTitle(genreName);\n    }\n\n\n    const [genreTitle, setGenreTitle] = useState(\"\")\n    const [treeFirtsMovies, setTreeFirtsMovies] = useState([])\n    const [MoviesToShow, setMoviesToShow] = useState([])\n    const [movies, setMovies] = useState([])\n\n\n    useEffect(() => {\n        setMovies(MoviesByGenre)\n        setMoviesToShow(MoviesByGenre);\n        const sortMovies = () => {\n            const sortedMoovies = MoviesByGenre.sort((a, b) => {\n                return b.vote_count - a.vote_count\n            })\n            setTreeFirtsMovies(sortedMoovies.slice(0, 3))\n        }\n        sortMovies()\n    }, [MoviesByGenre]);\n\n\n    return (\n        <div className={styles.body}>\n            <div className={styles.parent__presentaion_cards}>\n                <treeBestMovies treeFirtsMovies={treeFirtsMovies} />\n                <ul>\n                    {\n                        genres.map(genre => <li key={genre.id} className=\"m-1\"> <button onClick={() => getGenresMovies(genre.id, genre.name)}> <nobr>{genre.name}</nobr></button></li>)\n                    }\n                </ul>\n            </div>\n            <h1 className=\"text-white mt-5 p-3 header\" >{genreTitle}</h1>\n            <div className={styles.Movies__cards__parent} id=\"myHeader\">\n                {\n                    movies.map(Movie => {\n                        return <CardMovie key={Movie.id} Movie={Movie} />\n                    })\n                }\n            </div>\n            <Footer />\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}